{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e40ff261",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5395\n"
     ]
    }
   ],
   "source": [
    "import ctypes\n",
    "\n",
    "# Load the shared library\n",
    "libpmu = ctypes.CDLL('./libpmu.so')\n",
    "\n",
    "# Now you can call the functions from the shared library\n",
    "libpmu.initialize_pmu_counters()\n",
    "print(libpmu.get_cycle_count())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7788d63c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ctypes\n",
    "import time\n",
    "import psutil\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the shared library\n",
    "libpmu = ctypes.CDLL('./libpmu.so')\n",
    "\n",
    "def recur_fibo(n):\n",
    "    if n <= 1:\n",
    "        return n\n",
    "    else:\n",
    "        return(recur_fibo(n-1) + recur_fibo(n-2))\n",
    "\n",
    "# Vary the number of terms from 1 to 30\n",
    "for n in range(1, 31):\n",
    "    times = []\n",
    "    cycle_counts = []\n",
    "\n",
    "    # Take multiple trials for each variation\n",
    "    for _ in range(3):\n",
    "        # Initialize the cyclecounter\n",
    "        libpmu.initialize_pmu_counters()\n",
    "\n",
    "        # Get the 'before' time and cycle count\n",
    "        start_time = time.time()\n",
    "        start_cycles = libpmu.get_cycle_count()\n",
    "\n",
    "        # Run the recur_fibo function on a CPU 1\n",
    "        psutil.Process().cpu_affinity([1])\n",
    "        recur_fibo(n)\n",
    "\n",
    "        # Get the 'after' cycle count and time\n",
    "        end_cycles = libpmu.get_cycle_count()\n",
    "        end_time = time.time()\n",
    "\n",
    "        # Get the cycle count and the amount of time used\n",
    "        cycle_counts.append(end_cycles - start_cycles)\n",
    "        times.append(end_time - start_time)\n",
    "\n",
    "    # Calculate the average and standard deviation\n",
    "    avg_time = np.mean(times)\n",
    "    avg_cycles = np.mean(cycle_counts)\n",
    "    error_time = np.std(times) / np.sqrt(3)\n",
    "    error_cycles = np.std(cycle_counts) / np.sqrt(3)\n",
    "\n",
    "    # Plot the average results for varying 'n' along with error bars of your measurements\n",
    "    plt.errorbar(n, avg_time, yerr=error_time, fmt='o')\n",
    "    plt.errorbar(n, avg_cycles, yerr=error_cycles, fmt='o')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6897c8e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d341a6b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
